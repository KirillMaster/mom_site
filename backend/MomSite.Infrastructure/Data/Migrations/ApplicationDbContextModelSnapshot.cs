// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MomSite.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MomSite.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MomSite.Core.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsForSale")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("MomSite.Core.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7406),
                            Description = "Картины на театральную тематику",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Театральные работы",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7409)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7413),
                            Description = "Классические натюрморты",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Натюрморты",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7413)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7415),
                            Description = "Природные пейзажи",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Пейзажи",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7415)
                        });
                });

            modelBuilder.Entity("MomSite.Core.Models.PageContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PageKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TextContent")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PageKey", "ContentKey")
                        .IsUnique();

                    b.ToTable("PageContents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentKey = "welcome_message",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7510),
                            DisplayOrder = 1,
                            IsActive = true,
                            PageKey = "home",
                            TextContent = "Добро пожаловать в мир искусства! Здесь вы найдете уникальные работы в стиле импрессионизма, созданные с любовью и вдохновением.",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7510)
                        },
                        new
                        {
                            Id = 2,
                            ContentKey = "banner_image",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7513),
                            DisplayOrder = 2,
                            ImagePath = "/images/banner-default.jpg",
                            IsActive = true,
                            PageKey = "home",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7514)
                        },
                        new
                        {
                            Id = 3,
                            ContentKey = "biography",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7515),
                            DisplayOrder = 1,
                            IsActive = true,
                            PageKey = "about",
                            TextContent = "Я художник-импрессионист, вдохновленный красотой окружающего мира. Мои работы отражают любовь к театральному искусству и классическим натюрмортам.",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7515)
                        },
                        new
                        {
                            Id = 4,
                            ContentKey = "artist_photo",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7516),
                            DisplayOrder = 2,
                            ImagePath = "/images/artist-default.jpg",
                            IsActive = true,
                            PageKey = "about",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7517)
                        },
                        new
                        {
                            Id = 5,
                            ContentKey = "instagram",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7518),
                            DisplayOrder = 1,
                            IsActive = true,
                            LinkUrl = "https://instagram.com/",
                            PageKey = "contacts",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7518)
                        },
                        new
                        {
                            Id = 6,
                            ContentKey = "vk",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7519),
                            DisplayOrder = 2,
                            IsActive = true,
                            LinkUrl = "https://vk.com/",
                            PageKey = "contacts",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7519)
                        },
                        new
                        {
                            Id = 7,
                            ContentKey = "telegram",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7520),
                            DisplayOrder = 3,
                            IsActive = true,
                            LinkUrl = "https://t.me/",
                            PageKey = "contacts",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7520)
                        },
                        new
                        {
                            Id = 8,
                            ContentKey = "whatsapp",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7521),
                            DisplayOrder = 4,
                            IsActive = true,
                            LinkUrl = "https://wa.me/",
                            PageKey = "contacts",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7522)
                        },
                        new
                        {
                            Id = 9,
                            ContentKey = "youtube",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7522),
                            DisplayOrder = 5,
                            IsActive = true,
                            LinkUrl = "https://youtube.com/",
                            PageKey = "contacts",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7523)
                        },
                        new
                        {
                            Id = 10,
                            ContentKey = "email",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7524),
                            DisplayOrder = 6,
                            IsActive = true,
                            PageKey = "contacts",
                            TextContent = "info@angelamoiseenko.ru",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7524)
                        });
                });

            modelBuilder.Entity("MomSite.Core.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "Анна Петрова",
                            Content = "Потрясающие работы! Каждая картина передает особую атмосферу и эмоции. Очень рекомендую!",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7565),
                            IsActive = true,
                            Rating = 5,
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7565)
                        },
                        new
                        {
                            Id = 2,
                            AuthorName = "Михаил Иванов",
                            Content = "Уникальный стиль и мастерство. Картины завораживают своей красотой и глубиной.",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7567),
                            IsActive = true,
                            Rating = 5,
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7567)
                        },
                        new
                        {
                            Id = 3,
                            AuthorName = "Елена Сидорова",
                            Content = "Прекрасные натюрморты и театральные работы. Искусство высочайшего уровня!",
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7568),
                            IsActive = true,
                            Rating = 5,
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7569)
                        });
                });

            modelBuilder.Entity("MomSite.Core.Models.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ThumbnailPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VideoCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("VideoCategoryId");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("MomSite.Core.Models.VideoCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VideoCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7490),
                            Description = "Видео процесса создания картин",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Процесс создания",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7491)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7494),
                            Description = "Видео с выставок",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Выставки",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7494)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7495),
                            Description = "Интервью и рассказы о творчестве",
                            DisplayOrder = 3,
                            IsActive = true,
                            Name = "Интервью",
                            UpdatedAt = new DateTime(2025, 8, 8, 20, 55, 12, 264, DateTimeKind.Utc).AddTicks(7495)
                        });
                });

            modelBuilder.Entity("MomSite.Core.Models.Artwork", b =>
                {
                    b.HasOne("MomSite.Core.Models.Category", "Category")
                        .WithMany("Artworks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MomSite.Core.Models.Video", b =>
                {
                    b.HasOne("MomSite.Core.Models.VideoCategory", "VideoCategory")
                        .WithMany("Videos")
                        .HasForeignKey("VideoCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VideoCategory");
                });

            modelBuilder.Entity("MomSite.Core.Models.Category", b =>
                {
                    b.Navigation("Artworks");
                });

            modelBuilder.Entity("MomSite.Core.Models.VideoCategory", b =>
                {
                    b.Navigation("Videos");
                });
#pragma warning restore 612, 618
        }
    }
}
